name: Publish Python 🐍 distribution 📦 to PyPI and TestPyPI

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Install latest version of Poetry
        run: |
          pipx install poetry
          echo "/root/.local/bin" >> $GITHUB_PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"  # ${{ matrix.python-version }}
      - name: Get Poetry version
        run: |
          echo "GITHUB_PATH:"
          cat $GITHUB_PATH
          poetry --version
      - name: Add version to environment vars
        run: |
          PROJECT_VERSION=$(poetry version --short)
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV
      - name: Check if tag version matches project version
        run: |
          TAG=$(git describe HEAD --tags --abbrev=0)
          echo $TAG
          echo $PROJECT_VERSION
          if [[ "$TAG" != "v$PROJECT_VERSION" ]]; then exit 1; fi
      - name: Check pyproject.toml validity
        run: poetry check --no-interaction
      - name: Install dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-interaction
      - name: Build a binary wheel and a source tarball
        run: poetry build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Release Notes
        run: |
          if (git describe HEAD~ --tags --abbrev=0); then
            git log $(git describe HEAD~ --tags --abbrev=0)..HEAD --pretty='format:* %h %s (@%an)' --no-merges >> ".github/RELEASE-TEMPLATE.md"
          else
            touch .github/RELEASE-TEMPLATE.md
          fi
      - name: Create Release Draft
        uses: softprops/action-gh-release@v2
        with:
          body_path: ".github/RELEASE-TEMPLATE.md"
          draft: true
          fail_on_unmatched_files: true
          files: |
            dist/django_pg_stat_statements-${{env.PROJECT_VERSION}}-py3-none-any.whl
            dist/django_pg_stat_statements-${{env.PROJECT_VERSION}}.tar.gz

  publish-to-testpypi:
    name: Publish Python 🐍 distribution 📦 to TestPyPI
    needs:
      - build
    runs-on: ubuntu-latest

    environment:
      name: test-publish-pypi
      url: https://test.pypi.org/p/django-pg-stat-statements

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution 📦 to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          repository-url: https://test.pypi.org/legacy/
          verbose: true

  publish-to-pypi:
    name: Publish Python 🐍 distribution 📦 to PyPI
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
      - build
      - publish-to-testpypi
    runs-on: ubuntu-latest

    environment:
      name: publish-pypi
      url: https://pypi.org/p/django-pg-stat-statements

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          verbose: true

  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    needs:
      - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v2.1.1
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --notes ""
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `dist/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: >-
          gh release upload
          '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'
